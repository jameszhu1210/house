buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }


}
allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    group = 'com.sysco.house'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    //mainClassName = 'com.sysco.house.web.HouseWebApplication'
}

//所有子项目共享的配置
subprojects {
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    dependencies {
        //数据库驱动
        compile 'mysql:mysql-connector-java:6.0.6'
        //druid阿里巴巴数据库连接池
        compile 'com.alibaba:druid:1.1.6'
        compile 'org.projectlombok:lombok:1.16.8'
        compile 'org.apache.commons:commons-lang3:3.0'
        compile group: 'com.google.guava', name: 'guava', version: '20.0'
        compile 'org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE'
    }
}

project(':house-biz') {
    dependencies {
        compile project(":house-common")
    }
}

project(':house-web') {
    apply plugin: "war"
    dependencies {
        compile project(":house-biz")
    }
    processResources{
        /* 从'$projectDir/src/main/java'目录下复制文件到'WEB-INF/classes'目录下覆盖原有同名文件*/
        from("$projectDir/src/main/java")
    }

    /*自定义任务用于将当前子项目的java类打成jar包,此jar包不包含resources下的文件*/
    def jarArchiveName="${project.name}-${version}.jar"
    task jarWithoutResources(type: Jar) {
        from sourceSets.main.output.classesDir
        archiveName jarArchiveName
    }

    /*重写war任务:*/
    war {
        dependsOn jarWithoutResources
        /* classpath排除sourceSets.main.output.classesDir目录,加入jarWithoutResources打出来的jar包 */
        classpath = classpath.minus(files(sourceSets.main.output.classesDir)).plus(files("$buildDir/$libsDirName/$jarArchiveName"))
    }
    /*打印编译运行类路径*/
    task jarPath << {
        println configurations.compile.asPath
    }
}
/*从子项目拷贝War任务生成的压缩包到根项目的build/explodedDist目录*/
task explodedDist(type: Copy) {
    into "$buildDir/explodedDist"
    subprojects {
        from tasks.withType(War)
    }
}

